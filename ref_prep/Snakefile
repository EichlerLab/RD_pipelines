import os

SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)

shell.executable("/bin/bash")
shell.prefix("set -eo pipefail; ")

if config == {}:
    configfile: "%s/config.yaml" % SNAKEMAKE_DIR

REF_NAME = config["ref_name"]

if not os.path.exists("log"):
    os.makedirs("log")

localrules: all

rule all:
    input: "tracks/%s.noWM_pad36" % REF_NAME,
           "tracks/%s.sunk_mask_track_pad36_e0.dts" % REF_NAME,
           "tracks/%s.gc_w200.GC_content" % REF_NAME,
           "tracks/500_bp_windows.pkl",
           "tracks/500_bp_windows.sunk.pkl",
           "tracks/control_locations.txt",
           expand("tracks/%s.{type}.DTS" % REF_NAME, type=["dgv", "segdups", "gaps"])

rule liftover:
    input: control_locs=config["input_control_locs"], chain=config["chain_file"]
    output: "tracks/control_locations.bed", "tracks/control_locations.txt"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        "liftOver {input.control_locs} {input.chain} {output[0]} tracks/unmapped.control_locs.bed; "
        "awk '{{print $4,$1,$2,$3}}' {output[0]} > {output[1]}"

rule sunk_dts_windows:
    input: contigs=config["masked_contigs"], mask="tracks/%s.sunk_mask_track_pad36_e0.dts" % REF_NAME
    output: "tracks/500_bp_windows.sunk.pkl"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sudmant.cfg; "
        "python {SNAKEMAKE_DIR}/scripts/generate_window_files.py "
            "--contig_file {input.contigs} "
            "--mask_file {input.mask} "
            "--wnd_width 500 "
            "--slide_by 100 "
            "--sunk_based "
            "--region_output {output}"

rule wssd_dts_windows:
    input: contigs=config["masked_contigs"], mask="tracks/%s.noWM_pad36" % REF_NAME
    output: "tracks/500_bp_windows.pkl"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sudmant.cfg; "
        "python {SNAKEMAKE_DIR}/scripts/generate_window_files.py "
            "--contig_file {input.contigs} "
            "--mask_file {input.mask} "
            "--wnd_width 500 "
            "--slide_by 100 "
            "--region_output {output}"

rule sunk_mask:
    input: ref=config["masked_ref"], contigs=config["masked_contigs"], sunks="kmers/unique_kmers.bed"
    output: "tracks/%s.sunk_mask_track_pad36_e0.dts" % REF_NAME
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sudmant.cfg; "
        "python {SNAKEMAKE_DIR}/scripts/make_kitzman_sunk_mask.py "
            "--input_fa {input.ref} "
            "--input_RM_fa {input.ref} "
            "--input_TRF_fa {input.ref} "
            "--input_sunk_locs {input.sunks} "
            "--contigs {input.contigs} "
            "--pad 36 "
            "--fn_sunkmask_out {output}"

rule kmer_bed:
    input: "kmers/unique_kmers.bam"
    output: "kmers/unique_kmers.bed"
    params:
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sunk.cfg; "
        "bedtools bamtobed -i {input} > {output}"

rule map_kmers:
    input: ref=config["masked_ref"], kmers="kmers/unique_kmers.fasta"
    output: "kmers/unique_kmers.bam"
    params: sge_opts="-l mfree=4G,h_rt=3:0:0:0 -pe serial 4"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sunk.cfg; "
        "mrsfast --search {input.ref} -n 0 -e 0 --seq {input.kmers} -o $TMPDIR/mappings.sam --disable-nohit --threads 4 --mem 8; "
        "samtools sort -@ 4 -m 2G -T $TMPDIR/tmp.mappings -o {output} $TMPDIR/mappings.sam"

rule jellyfish:
    input: config["unmasked_ref"]
    output: "kmers/unique_kmers.fasta", "kmers/mer_counts.jf"
    params: sge_opts="-l mfree=4G,h_rt=10:0:0 -pe serial 8"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sunk.cfg; "
        "jellyfish count -m 30 -s 3500M -t 8 -U 1 --out-counter-len 1 -o $TMPDIR/mer_counts.jf {input}; "
        "jellyfish dump -U 1 -o {output[0]} $TMPDIR/mer_counts.jf; "
        "rsync --bwlimit=80000 $TMPDIR/mer_counts.jf {output[1]}"

rule mask_dts:
    input: ref=config["masked_ref"], contigs=config["masked_contigs"]
    output: "tracks/%s.noWM_pad36" % REF_NAME
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sudmant.cfg; "
        "python {SNAKEMAKE_DIR}/scripts/make_padded_mask_from_multiple_Nd_fastas.py "
                  "--input_fa {input.ref} "
                  "--input_RM_fa {input.ref} "
                  "--input_TRF_fa {input.ref} "
                  "--pad 36 "
                  "--contigs {input.contigs} "
                  "--fn_mask_out {output}"

rule annotate_dts:
    input: annotations=lambda wc: config[wc.type], contigs=config["masked_contigs"]
    output: "tracks/%s.{type}.DTS" % REF_NAME
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sudmant.cfg; "
        "python {SNAKEMAKE_DIR}/scripts/build_annotation_flat_file.py "
        "--contigLengths {input.contigs} "
        "--input_annotations {input.annotations} "
        "--chr:start:end_cols=0:1:2 "
        "--outTable {output}"

rule annotate_gc:
    input: ref=config["unmasked_ref"], contigs=config["unmasked_contigs"]
    output: "tracks/%s.gc_w200.GC_content" % REF_NAME
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        ". {SNAKEMAKE_DIR}/envs/env.sudmant.cfg; "
        "python {SNAKEMAKE_DIR}/scripts/wssd_build_gc_vector.py "
        "--contigLengths {input.contigs} "
        "--gc_width 200 "
        "--fastq_sequence {input.ref} "
        "--outTable {output}"
